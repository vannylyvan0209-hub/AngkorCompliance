version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: angkor-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: angkor_compliance
      POSTGRES_USER: angkor_user
      POSTGRES_PASSWORD: angkor_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - angkor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U angkor_user -d angkor_compliance"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: angkor-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - angkor-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: angkor-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://angkor_user:angkor_password@postgres:5432/angkor_compliance?schema=public
      REDIS_URL: redis://redis:6379
      PORT: 3001
      CORS_ORIGIN: http://localhost:5173
    ports:
      - "3001:3001"
    volumes:
      - ../backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - angkor-network
    command: npm run dev

  # Frontend Development Server
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
    container_name: angkor-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:3001
      VITE_APP_NAME: Angkor Compliance Platform
    ports:
      - "5173:5173"
    volumes:
      - ../frontend:/app
      - /app/node_modules
    networks:
      - angkor-network
    command: npm run dev

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: angkor-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - angkor-network
    profiles:
      - production

  # Database Admin (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: angkor-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@angkorcompliance.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - angkor-network
    profiles:
      - development

  # Redis Admin (RedisInsight)
  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: angkor-redisinsight
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - redisinsight_data:/data
    depends_on:
      - redis
    networks:
      - angkor-network
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  redisinsight_data:
    driver: local

networks:
  angkor-network:
    driver: bridge
