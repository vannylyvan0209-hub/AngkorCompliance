apiVersion: v1
kind: Secret
metadata:
  name: backend-secret
  namespace: angkor-compliance
  labels:
    app.kubernetes.io/name: angkor-compliance
    app.kubernetes.io/component: backend
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  JWT_SECRET: anN0X3NlY3JldA==  # jwt_secret
  JWT_REFRESH_SECRET: anN0X3JlZnJlc2hfc2VjcmV0  # jwt_refresh_secret
  POSTGRES_PASSWORD: cG9zdGdyZXNfcGFzc3dvcmQ=  # postgres_password
  REDIS_PASSWORD: cmVkaXNfcGFzc3dvcmQ=  # redis_password
  AWS_ACCESS_KEY_ID: YXdzX2FjY2Vzc19rZXk=  # aws_access_key
  AWS_SECRET_ACCESS_KEY: YXdzX3NlY3JldF9rZXk=  # aws_secret_key
  SMTP_PASSWORD: c210cF9wYXNzd29yZA==  # smtp_password
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: angkor-compliance
  labels:
    app.kubernetes.io/name: angkor-compliance
    app.kubernetes.io/component: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: angkor-compliance
      app.kubernetes.io/component: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: angkor-compliance
        app.kubernetes.io/component: backend
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: backend
        image: ghcr.io/your-username/angkor-compliance-backend:latest
        ports:
        - containerPort: 3001
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: DATABASE_URL
          value: "postgresql://angkor_user:$(POSTGRES_PASSWORD)@postgres-service:5432/angkor_compliance"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: JWT_SECRET
        - name: JWT_REFRESH_SECRET
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: JWT_REFRESH_SECRET
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: POSTGRES_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: REDIS_PASSWORD
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: AWS_SECRET_ACCESS_KEY
        - name: AWS_REGION
          value: "us-east-1"
        - name: AWS_S3_BUCKET
          value: "angkor-compliance-files"
        - name: SMTP_HOST
          value: "smtp.gmail.com"
        - name: SMTP_PORT
          value: "587"
        - name: SMTP_USER
          value: "noreply@angkor-compliance.com"
        - name: SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: SMTP_PASSWORD
        - name: FRONTEND_URL
          value: "https://angkor-compliance.com"
        - name: CORS_ORIGIN
          value: "https://angkor-compliance.com"
        - name: RATE_LIMIT_WINDOW_MS
          value: "900000"
        - name: RATE_LIMIT_MAX_REQUESTS
          value: "100"
        - name: MAX_FILE_SIZE
          value: "10485760"
        - name: ALLOWED_FILE_TYPES
          value: "pdf,doc,docx,xls,xlsx,jpg,jpeg,png"
        - name: LOG_LEVEL
          value: "info"
        - name: SENTRY_DSN
          value: ""
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
        volumeMounts:
        - name: backend-logs
          mountPath: /app/logs
        - name: backend-uploads
          mountPath: /app/uploads
      volumes:
      - name: backend-logs
        emptyDir: {}
      - name: backend-uploads
        emptyDir: {}
      initContainers:
      - name: db-migration
        image: ghcr.io/your-username/angkor-compliance-backend:latest
        command: ["npx", "prisma", "migrate", "deploy"]
        env:
        - name: DATABASE_URL
          value: "postgresql://angkor_user:$(POSTGRES_PASSWORD)@postgres-service:5432/angkor_compliance"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: POSTGRES_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: angkor-compliance
  labels:
    app.kubernetes.io/name: angkor-compliance
    app.kubernetes.io/component: backend
spec:
  selector:
    app.kubernetes.io/name: angkor-compliance
    app.kubernetes.io/component: backend
  ports:
  - port: 3001
    targetPort: 3001
    name: http
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: angkor-compliance
  labels:
    app.kubernetes.io/name: angkor-compliance
    app.kubernetes.io/component: backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
