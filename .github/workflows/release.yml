name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1)
          COMMITS=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        else
          COMMITS=$(git log --pretty=format:"- %s (%h)" --max-count=20)
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        echo "$COMMITS" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "## Full Changelog" >> $GITHUB_OUTPUT
        echo "https://github.com/${{ github.repository }}/compare/$LAST_TAG...${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Angkor Compliance Platform ${{ steps.version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}

  # Build and Upload Assets
  build-assets:
    name: Build Assets
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install frontend dependencies
      run: |
        cd angkor-compliance-v2/frontend
        npm ci

    - name: Install backend dependencies
      run: |
        cd angkor-compliance-v2/backend
        npm ci

    - name: Build frontend
      run: |
        cd angkor-compliance-v2/frontend
        npm run build

    - name: Build backend
      run: |
        cd angkor-compliance-v2/backend
        npm run build

    - name: Create frontend archive
      run: |
        cd angkor-compliance-v2/frontend
        tar -czf ../../frontend-build.tar.gz dist/

    - name: Create backend archive
      run: |
        cd angkor-compliance-v2/backend
        tar -czf ../../backend-build.tar.gz dist/

    - name: Upload frontend assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./frontend-build.tar.gz
        asset_name: frontend-build.tar.gz
        asset_content_type: application/gzip

    - name: Upload backend assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./backend-build.tar.gz
        asset_name: backend-build.tar.gz
        asset_content_type: application/gzip

  # Docker Release
  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./angkor-compliance-v2
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-assets, docker-release]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying version ${{ needs.create-release.outputs.version }} to production..."
        # Add your production deployment commands here
        # Example: kubectl set image deployment/angkor-compliance angkor-compliance=ghcr.io/${{ github.repository }}:${{ needs.create-release.outputs.version }}

    - name: Run health checks
      run: |
        echo "Running health checks for version ${{ needs.create-release.outputs.version }}..."
        # Add health check commands here

    - name: Notify deployment
      run: |
        echo "Production deployment of version ${{ needs.create-release.outputs.version }} completed successfully!"
        # Add notification logic here (Slack, Discord, email, etc.)
